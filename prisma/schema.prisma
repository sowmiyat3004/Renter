// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Note: SQLite doesn't support enums, so we use String with constraints

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  passwordHash  String?   @map("password_hash")
  googleId      String?   @unique @map("google_id")
  role          String    @default("USER") // GUEST, USER, ADMIN, SUPER_ADMIN
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  listings      Listing[]
  adminActions  AdminAction[]
  notifications Notification[]

  @@map("users")
}

model Listing {
  id          String   @id @default(cuid())
  ownerId     String   @map("owner_id")
  title       String
  description String
  priceAmount Float    @map("price_amount")
  currency    String   @default("INR")
  bedrooms    Int
  bathrooms   Int
  state       String
  district    String?  // District/County
  city        String
  locality    String?  // Neighborhood/Area/Locality
  address     String?
  lat         Float
  lng         Float
  status      String   @default("PENDING") // DRAFT, PENDING, APPROVED, REJECTED, ARCHIVED
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  owner       User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images      ListingImage[]
  amenities   ListingAmenity[]
  adminActions AdminAction[]

  @@map("listings")
}

model ListingImage {
  id        String   @id @default(cuid())
  listingId String   @map("listing_id")
  url       String
  isPrimary Boolean  @default(false) @map("is_primary")
  width     Int?
  height    Int?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("listing_images")
}

model Amenity {
  id   String @id @default(cuid())
  name String @unique

  // Relations
  listingAmenities ListingAmenity[]

  @@map("amenities")
}

model ListingAmenity {
  id        String  @id @default(cuid())
  listingId String  @map("listing_id")
  amenityId String  @map("amenity_id")

  // Relations
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  amenity   Amenity @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@unique([listingId, amenityId])
  @@map("listing_amenities")
}

model AdminAction {
  id         String   @id @default(cuid())
  adminId    String   @map("admin_id")
  listingId  String   @map("listing_id")
  actionType String   @map("action_type") // APPROVE, REJECT, SUSPEND, DELETE
  reason     String?
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  admin      User    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  listing    Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("admin_actions")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      String   // listing_approved, listing_rejected, listing_created, admin_action
  title     String
  message   String
  listingId String?  @map("listing_id")
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("system_config")
}
